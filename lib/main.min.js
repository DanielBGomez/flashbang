(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports={
    "manifest_version":1,
    "type":"WebApp",
    "meta":{
        "name":"Owl Widgets",
        "version":"0.2.1",
        "minimum-overwolf-version":"0.77.10",
        "author":"Daniel B Gomez",
        "icon":"assets/icon/app/icon.png",
        "icon_gray":"assets/icon/app/icon.png",
        "launcher_icon": "assets/icon/app/favicon.ico",
        "description":"Flashbang widget"
    },
    "data": {
        "start_window":"Main",
        "windows": {
            "Main": {
                "file":"lib/main.html",
                "is_background_page": true
            },
            "Dashboard": {
                "file":"lib/dashboard.html",
                "desktop_only": true,
                "native_window": true,
                "transparent": true,
                "resizable": true,
                "use_os_windowing": false,
                "show_maximize": true,
                "disable_blur": true,
                "clickthrough": false,
                "size": {
                    "width":800,
                    "height":600
                    },
                "min_size": {
                    "width":600,
                    "height":400
                }
            }
        }
    }
}
},{}],2:[function(require,module,exports){
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
},{}],3:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
},{}],4:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":5}],5:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
/**
 * This file only works as a base template for the real config file
 */

var Widgets = [{
  uuid: "95e00420-93ff-458d-b887-587950da96e7",
  active: false,
  disabled: false,
  name: "Flashbang",
  version: "0.1.0",
  image: "/assets/icon/app/icon.png"
}];
var _default = Widgets;
exports["default"] = _default;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
/**
 * Use this API to get I/O functionalities for the current extension and access your extension's {@link https://overwolf.github.io/docs/api/overwolf-extensions-io#storagespace-enum|dedicated storage space} like the pictures folder, videos folder, or appData folder.
 * 
 * For general I/O functionalities, use the {@link https://overwolf.github.io/docs/api/overwolf-io|overwolf.io API}.
 *
 * In addition, the {@link https://overwolf.github.io/docs/topics/simple-io-plugin|simple I/O plugin} offers several more general I/O features that are not available through the APIs.
 * 
 * @typedef {object} ExtensionsIOAPI
 * @property {createDirectory} createDirectory
 * @property {getStoragePath} getStoragePath
 * @property {exist} exist
 * @property {move} move
 * @property {delete} delete
 * @property {copy} copy
 * @property {dir} dir
 * @property {readTextFile} readTextFile
 * @property {writeTextFile} writeTextFile
 * @property {ExtensionsIOEnums} enums
 */
// ###################################
// ##            Methods            ##
// ###################################

/**
 * Create directory.
 * 
 * @version 0.147
 * 
 * @callback createDirectory
 * @param {StorageSpace} space          The selected storage space.
 * @param {string} path                 Path within the space. Use null or empty string for the space root.
 * @param {ResultCallback} callback     Reports success or failure.
 * @returns {void}
 */

/**
 * Returns the full path of given extension storage space.
 * 
 * @version 0.147
 * 
 * @callback getStoragePath
 * @param {StorageSpace} space                      The selected storage space.
 * @param {GetStoragePathResultCallback} callback   Returns with the full path of the requested extension storage space
 * @returns {void}
 */

/**
 * Returns whether the file or folder specified exist.
 * 
 * @version 0.147
 * 
 * @callback exist
 * @param {StorageSpace} space              The selected storage space.
 * @param {string} path                     Path within the space. Use null or empty string for the space root.
 * @param {ExistResultCallback} callback    Returns with the full path of the requested extension storage space
 * @returns {void}
 */

/**
 * Moves source file or directory and its contents to destination.
 * 
 * @version 0.147
 * 
 * @callback move
 * @param {StorageSpace} space          The selected storage space.
 * @param {string} source               Path for the source.
 * @param {string} destination          Path to move to, including filename.
 * @param {ResultCallback} callback     Reports success or failure.
 * @returns {void}
 */

/**
 * Deletes file or directory and its contents.
 * 
 * @version 0.147
 * 
 * @callback delete
 * @param {StorageSpace} space              The selected storage space.
 * @param {string} path                     Path within the space. Use null or empty string for the space root.
 * @param {DeleteResultCallback} callback   Returns with array of file and directory paths that could not be deleted.
 * @returns {void}
 */

/**
 * Copies source file or directory and its contents to destination.
 * 
 * @version 0.147
 * 
 * @callback copy
 * @param {StorageSpace} space          The selected storage space.
 * @param {string} source               Path for the source.
 * @param {string} destination          Path to copy to, including filename.
 * @param {ResultCallback} callback     Reports success or failure.
 * @returns {void}
 */

/**
 * Lists directories and files under given directory path.
 * 
 * @version 0.147
 * 
 * @callback dir
 * @param {StorageSpace} space              The selected storage space.
 * @param {string} directoryPath            Path within the space. Use null or empty string for the space root.
 * @param {DirResultCallback} callback      Returns with array of file names within the directory.
 * @returns {void}
 */

/**
 * Returns the content of a given file.
 * 
 * @version 0.147
 * 
 * @callback readTextFile
 * @param {StorageSpace} space                      The selected storage space.
 * @param {string} filePath                         Path of a file to read (within the space).
 * @param {ReadTextFileResultCallback} callback     Returns with the content of the fil.
 * @returns {void}
 */

/**
 * Writes the provided text content to the provided file.
 * 
 * @version 0.147
 * 
 * @callback writeTextFile
 * @param {StorageSpace} space          The selected storage space.
 * @param {string} filePath             Path of a file to write (within the space).
 * @param {string} content              Text content to write (added to the end of file, not overwrite the content)
 * @param {ResultCallback} callback     Returns with the content of the fil.
 * @returns {void}
 */
// ###################################
// ##           Callbacks           ##
// ###################################

/**
 * Reports success or failure.
 * 
 * @callback ResultCallback
 * @param {Result} callback
 * @returns {void}
 */

/**
 * @callback GetStoragePathResultCallback
 * @param {GetStoragePathResult} callback
 * @returns {void}
 */

/**
 * @callback ExistResultCallback
 * @param {ExistResult} callback
 * @returns {void}
 */

/**
 * @callback DeleteResultCallback
 * @param {DeleteResult} callback
 * @returns {void}
 */

/**
 * @callback DirResultCallback
 * @param {DirResult} callback
 * @returns {void}
 */

/**
 * @callback ReadTextFileResultCallback
 * @param {ReadTextFileResult} callback
 * @returns {void}
 */
// ###################################
// ##             Types             ##
// ###################################

/**
 * @typedef ExtensionsIOEnums
 * @property {FileType} FileType
 * @property {StorageSpace} StorageSpace
 */

/**
 * FileType is "file"|"directory".
 * 
 * @version 0.147
 * 
 * @typedef {'file'|'directory'} FileType
 */

/**
 * The selected storage space.
 * 
 * Note that the default Overwolf's captured pictures and videos folder is the windows "pictures"/"videos" folder.
 * Of course, the user can change it anytime from the OW client UI.
 * 
 * @version 0.147
 * 
 * @typedef StorageSpace
 * @property {string} pictures  The extension's captured pictures folder, `OverwolfPicturesFolder\AppName\`
 * @property {string} videos    The extension's captured videos folder, `OverwolfVideosFolder\AppName\`
 * @property {string} appData   The extension's folder under Roaming app data, `AppData\Roaming\Overwolf\[Extensions UID]`
 */

/**
 * @version 0.147
 * 
 * @typedef Content
 * @property {FileType} type    FileType is "file" or "directory".
 * @property {string} path
 */

/**
 * @typedef FileContent
 * @property {boolean} success
 * @property {string?} content
 * @property {string?} error        Error reason in case of success = false
 */

/**
 * @typedef Result
 * @property {boolean} success
 * @property {string?} error        Error reason in case of success = false
 */

/**
 * @version 0.147
 * 
 * @typedef ReadTextFileResult
 * @property {boolean} success
 * @property {string?} error        Error reason in case of success = false
 * @property {FileContent} content
 */

/**
 * @version 0.147
 * 
 * @typedef ExistResult
 * @property {boolean} success
 * @property {string?} error        Error reason in case of success = false
 * @property {FileType?} type        FileType is "file" or "directory".
 */

/**
 * @version 0.147
 * 
 * @typedef GetStoragePathResult
 * @property {boolean} success
 * @property {string?} error        Error reason in case of success = false
 * @property {path?} type           Full path of the requested extension storage space
 */

/**
 * @version 0.147
 * 
 * @typedef DirResult
 * @property {boolean} success
 * @property {string?} error                Error reason in case of success = false
 * @property {Array<string>?} files         Array of file names within the directory.
 * @property {Array<string>?} directories   Array of directory names within the directory.
 */

/**
 * @version 0.147
 * 
 * @typedef DeleteResult
 * @property {boolean} success
 * @property {string?} error                        Error reason in case of success = false
 * @property {Array<Content>?} undeleted_content    Array of file and directory paths that could not be deleted.
 */

/**
 * @type {ExtensionsIOAPI}
 */

var io = {// createDirectory: e => e,
  // getStoragePath: e => e,
  // exist: e => e,
  // move: e => e,
  // delete: e => e,
  // copy: e => e,
  // dir: e => e,
  // readTextFile: e => e,
  // writeTextFile: e => e,
};
var _default = io;
exports["default"] = _default;

},{}],8:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extensions = _interopRequireDefault(require("./extensions.io")); // Imports

/**
 * @typedef {import('./extensions.io').ExtensionsIOAPI} ExtensionsIOAPI
 */

/**
 * Change or retrieve the information of an Overwolf app or respond to events in the app’s lifecycle.
 * 
 * @typedef {object} ExtensionsAPI
 * @property {launch} launch
 * @property {setInfo} setInfo
 * @property {getInfo} getInfo
 * @property {registerInfo} registerInfo
 * @property {unregisterInfo} unregisterInfo
 * @property {getRunningState} getRunningState
 * @property {getManifest} getManifest
 * @property {relaunch} relaunch
 * @property {updateExtension} updateExtension
 * @property {checkForExtensionUpdate} checkForExtensionUpdate
 * @property {getServiceConsumers} getServiceConsumers
 * 
 * @property {ExtensionsIOAPI} io
 */
// ###################################
// ##            Methods            ##
// ###################################
// ###################################
// ##            Events             ##
// ###################################
// ###################################
// ##             Types             ##
// ###################################

/**
 * @type {ExtensionsAPI}
 */


var extension = {
  io: _extensions["default"]
};
var _default = extension;
exports["default"] = _default;

},{"./extensions.io":7,"@babel/runtime/helpers/interopRequireDefault":3}],9:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extensions = _interopRequireDefault(require("./extensions"));

require("./utils");

require("./windows"); // Imports

/**
 * @typedef {import('./extensions').ExtensionsAPI} ExtensionsAPI
 */

/**
 * Overwolf APIs are global components that allow interaction with various Overwolf features, third party services and server-side queries.
 * 
 * @see https://overwolf.github.io/docs/api/overwolf-api-overview
 * 
 * @typedef {Object} Overwolf
 * @property {ExtensionsAPI} extensions           Use the overwolf.utils API to get the user's system information, send keystrokes to the game, open URLs in default browser and more.
 * @property {UtilsAPI} utils           Use the overwolf.utils API to get the user's system information, send keystrokes to the game, open URLs in default browser and more.
 * @property {WindowsAPI} windows       Use the overwolf.windows API to to create, modify or interact with your app's windows.
 */

/**
 * @type {Overwolf}
 */


var ow = typeof overwolf != "undefined" ? overwolf : {
  utils: {},
  windows: {},
  extensions: _extensions["default"]
};
var _default = ow;
exports["default"] = _default;

},{"./extensions":8,"./utils":10,"./windows":11,"@babel/runtime/helpers/interopRequireDefault":3}],10:[function(require,module,exports){
/**
 * Use this API to get the user’s system information, send keystrokes to the game, open URL in default browser and more.
 * 
 * Common use cases:
 * * Getting a string that is currently placed on the clipboard.
 * * Getting the user’s system information (OS, monitors, CPU, GPU, input devices and more).
 * * Opening a URL in a browser.
 * * Send keystrokes to the running game.
 * 
 * @typedef {object} UtilsAPI
 * @property {placeOnClipboard} placeOnClipboard
 * @property {getFromClipboard} getFromClipboard
 * @property {getMonitorsList} getMonitorsList
 * @property {getWindowDPI} getWindowDPI
 * @property {sendKeyStroke} sendKeyStroke
 * @property {openFilePicker} openFilePicker
 * @property {openFolderPicker} openFolderPicker
 * @property {openWindowsExplorer} openWindowsExplorer
 * @property {isTouchDevice} isTouchDevice
 * @property {openUrlInDefaultBrowser} openUrlInDefaultBrowser
 * @property {getSystemInformation} getSystemInformation
 * @property {getPeripherals} getPeripherals
 * @property {openStoreOneAppPage} openStoreOneAppPage
 * @property {openStore} openStore
 * @property {isMouseLeftButtonPressed} isMouseLeftButtonPressed
 * @property {uploadClientLogs} uploadClientLogs
 */
// ###################################
// ##            Methods            ##
// ###################################
// ###################################
// ##             Types             ##
// ###################################
"use strict";

},{}],11:[function(require,module,exports){
/**
 * Use this API to create, interact with and modify your app’s windows.
 * 
 * @typedef {object} WindowsAPI
 * @property {getMainWindow} getMainWindow
 * @property {getCurrentWindow} getCurrentWindow 
 * @property {obtainDeclaredWindow} obtainDeclaredWindow
 * @property {dragMove} dragMove
 * @property {dragResize} dragResize
 * @property {close} close
 * @property {minimize} minimize
 * @property {maximize} maximize
 * @property {restore} restore
 */
// ###################################
// ##            Methods            ##
// ###################################

/**
 * Returns a window object of the index page.
 * 
 * This function allows you to get direct access to your main index page (which should be a controller/background page) and it’s HTML Window object (and thus any JS function or DOM element), which is also guaranteed to exist when calling this method from any other window (unlike the getOpenWindows()).
 * 
 * If you hold one global "manager" object in your background, then all other windows have a single object to interact with. This is why we recommend the getMainWindow() approach.
 * 
 * overwolf.windows.sendMessage performs object copying, so it might be a bit less efficient - depending on your use-case
 * 
 * Read more in the {@link https://overwolf.github.io/docs/topics/communicating-between-windows|"Communication between windows"} section.
 * 
 * @callback getMainWindow
 * @returns {Window} 
 */

/**
 * Calls the given callback function with the current window object as a parameter.
 * 
 * @callback getCurrentWindow
 * @param {CBWindowResult} param    A callback function which will be called with the current window object as a parameter
 * @returns {void}
 */

/**
 * Creates an instance of your window (the window’s name has to be declared in the manifest.json) or returns a window by the window name.
 * 
 * This method can either have just the callback or an object and a callback.
 * 
 * Accepted objects:
 * * DefaultSizeAndLocation
 * * WindowProperties
 * 
 * @see DefaultSizeAndLocation
 * @see WindowProperties
 * 
 * 
 * @callback obtainDeclaredWindow
 * @param {string} windowName           The name of the window that was declared in the data.windows section in the manifest
 * @param {WindowProperties|DefaultSizeAndLocation|CBWindowResult} param 
 * @param {CBWindowResult} callback     A callback function which will be called with the current window object as a parameter
 * @returns {void}
 */

/**
 * Start dragging a window.
 * 
 * @callback dragMove
 * @param {string} windowId             The id or name of the window to drag
 * @param {CBWindowResult} callback     A callback which is called when the drag is completed
 */

/**
 * Start resizing the window from a specific edge or corner.
 * 
 * @todo contentRect param
 * @todo rect param
 * @todo callback param
 * 
 * @callback dragResize
 * @param {string} windowId             The id or name of the window to resize
 * @param {WindowDragEdge} edge         The edge or corner from which to resize the window
 */

/**
 * Closes the window.
 * 
 * @callback close
 * @param {string} windowId             The id or name of the window to close
 * @param {CBWindowResult} callback     Called after the window is closed
 */

/**
 * Minimizes the window.
 * 
 * @callback minimize
 * @param {string} windowId             The id or name of the window to minimize
 * @param {CBWindowResult} callback     Called after the window is minimized
 */

/**
 * Maximize the window.
 * 
 * * This function will not work if the manifest resizable flag is set to false.
 * * If you would like to "unmaximize" the window after calling "maximize()", you can call window.restore(), to restore the window to the previous size/position.
 * 
 * @callback maximize
 * @param {string} windowId             The id or name of the window to maximize
 * @param {CBWindowResult} callback     Called after the window is maximized
 */

/**
 * Restores a minimized/maximized/hidden window.
 * 
 * @callback restore
 * @param {string} window               The id or name of the window to restore
 * @param {CBWindowResult?} callback    Called after the window is restored
 */
// ###################################
// ##             Types             ##
// ###################################

/**
 * A callback function which will be called with a window object as a parameter
 * 
 * @callback CBWindowResult
 * @param {WindowResult} window
 * @returns {void}
 */

/**
 * An object that Enable the manifest size and position settings (default is false).
 * 
 * The default behaviour of OW is to "remember" the last size and position of a window, before it closes. When useDefaultSizeAndLocation is set to true, the window will be created using the default (manifest) size and location, rather than the saved setting (if one exists).
 * 
 * If there is no "start_position" property (size and position) for a window in the manifest, it will default to 0,0.
 * 
 * @typedef {Object} DefaultSizeAndLocation
 * 
 * @property {bool} useDefaultSizeAndLocation
 */

/**
 * Message prompt icon.
 * 
 * | Value       | Description                                              |
 * | :---------- | :------------------------------------------------------- |
 * | None        | No window edge or corner to drag                         |
 * | Left        | Drag the left window edge in order to resize it          |
 * | Right       | Drag the right window edge in order to resize it         |
 * | Top         | Drag the top window edge in order to resize it           |
 * | Bottom      | Drag the bottom window edge in order to resize it        |
 * | TopLeft     | Drag the top-left window edge in order to resize it      |
 * | TopRight    | Drag the top-right window edge in order to resize it     |
 * | BottomLeft  | Drag the bottom-left window edge in order to resize it   |
 * | BottomRight | Drag the bottom-right window edge in order to resize it  |
 * 
 * @version 0.78
 * 
 * @typedef {'None'|'Left'|'Right'|'Top'|'Bottom'|'TopLeft'|'TopRight'|'BottomLeft'|'BottomRight'} WindowDragEdge
 */

/**
 * The current window object.
 * 
 * @typedef {Object} WindowInfo
 * 
 * @property {string} id
 * @property {string} name
 * @property {number} width
 * @property {number} height
 * @property {number} top
 * @property {number} left
 * @property {boolean} isVisible
 * @property {WindowStateEx} stateEx    Always use this param to get the state of the window
 * @property {string} monitorId         Return monitorId (If the Window is not opened already) - allowing one window (background) to know on which monitor another window exists.
 * @property {string} Parent            The parent window id
 * @property {string} state             Deprecated and kept only for backward compatibility
 */

/**
 * An object that allows to override the manifest.json requested window settings.
 * 
 * @typedef {Object} WindowProperties
 * 
 * @property {boolean} nativeWindow
 * @property {boolean} enablePopupBlocker
 */

/**
 * Container for the currrent window object.
 * 
 * @typedef {Object} WindowResult
 * 
 * @property {boolean} success
 * @property {WindowInfo} window
 */

/**
 * Possible windows states
 * 
 * @typedef {'closed'|'minimized'|'hidden'|'normal'|'maximized'} WindowStateEx
 */
"use strict";

},{}],12:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _Data = _interopRequireDefault(require("./methods/Data"));

var _overwolf = _interopRequireDefault(require("./docs/overwolf"));

var _widgets = _interopRequireDefault(require("./configs/widgets")); // Methods
// Docs
// Configs


var STORAGE_SPACE = _overwolf["default"].extensions.io.enums.StorageSpace.appData;
var CONFIGS = {}; // Exists config file?

new Promise(function (resolve, reject) {
  return _overwolf["default"].extensions.io.exist(STORAGE_SPACE, 'configs/widgets.json', /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
      var success;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              success = _ref.success;

              if (!success) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", _overwolf["default"].extensions.io.readTextFile(STORAGE_SPACE, 'configs/widgets.json', function (_ref3) {
                var success = _ref3.success,
                    content = _ref3.content,
                    error = _ref3.error; // Exit if failed

                if (!success) return reject(error);

                try {
                  // Parse JSON
                  CONFIGS.WIDGETS = JSON.parse(content);
                  resolve();
                } catch (err) {
                  reject(err);
                }
              }));

            case 5:
              _context.prev = 5;
              _context.next = 8;
              return new Promise(function (resolve, reject) {
                return _overwolf["default"].extensions.io.exist(STORAGE_SPACE, 'configs', function (_ref4) {
                  var success = _ref4.success,
                      type = _ref4.type; // Create config folder if doesn't exists

                  if (!success) _overwolf["default"].extensions.io.createDirectory(STORAGE_SPACE, 'configs', function (_ref5) {
                    var success = _ref5.success,
                        error = _ref5.error;
                    return success ? resolve() : reject(error);
                  });
                });
              });

            case 8:
              _context.next = 10;
              return new Promise(function (resolve, reject) {
                return _overwolf["default"].extensions.io.writeTextFile(STORAGE_SPACE, 'configs/widgets.json', JSON.stringify(_widgets["default"]), function (_ref6) {
                  var success = _ref6.success,
                      error = _ref6.error;
                  return success ? resolve() : reject(error);
                });
              });

            case 10:
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](5);
              reject(_context.t0);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[5, 12]]);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
})["catch"](console.error).then(function () {
  // Use the default widgets config if failed to fetch the file
  if (!CONFIGS.WIDGETS) CONFIGS.WIDGETS = _widgets["default"]; // Setup data

  var App = (0, _Data["default"])(window, {
    windows: {},
    widgets: CONFIGS.WIDGETS || _widgets["default"]
  }); // Views

  var Manifest = require('../manifest.json');

  var Views = Manifest.data.windows; // Load views

  Promise.all(Object.keys(Views).map(function (windowName) {
    return new Promise(function (resolve, reject) {
      // Get window data
      _overwolf["default"].windows.obtainDeclaredWindow(windowName, function (_ref7) {
        var success = _ref7.success,
            window = _ref7.window; // Exit if failed

        if (!success) return reject(); // Store window id

        App.windows[windowName] = window.id; // Resolve

        resolve();
      });
    });
  })).then(function () {
    // Restore dashboard window
    _overwolf["default"].windows.restore(App.windows.Dashboard);
  });
});

},{"../manifest.json":1,"./configs/widgets":6,"./docs/overwolf":9,"./methods/Data":13,"@babel/runtime/helpers/asyncToGenerator":2,"@babel/runtime/helpers/interopRequireDefault":3,"@babel/runtime/regenerator":4}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Data;
/**
 * Create ref to data in the main window for communication between windows
 * 
 * @param {Window} window 
 * @returns {MainData}
 */

function Data(window) {
  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // Init app object if doesn't exists

  if (typeof window.app == 'undefined') window.app = initialState; // Return reference

  return window.app;
}
/**
 * @typedef {Object} MainData
 * @property {Object} app
 */

},{}]},{},[12]);
